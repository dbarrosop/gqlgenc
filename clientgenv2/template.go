package clientgenv2

import (

	// nolint:golint, nolintlint
	_ "embed"
	"fmt"
	"go/types"
	"strings"

	"github.com/99designs/gqlgen/codegen/config"
	"github.com/99designs/gqlgen/codegen/templates"
	gqlgencConfig "github.com/Yamashou/gqlgenc/config"
)

//go:embed template.gotpl
var template string

func RenderTemplate(cfg *config.Config, query *Query, mutation *Mutation, fragments []*Fragment, operations []*Operation, operationResponses []*OperationResponse, structSources []*StructSource, generateCfg *gqlgencConfig.GenerateConfig, client config.PackageConfig) error {
	if err := templates.Render(templates.Options{
		PackageName: client.Package,
		Filename:    client.Filename,
		Template:    template,
		Data: map[string]interface{}{
			"Query":               query,
			"Mutation":            mutation,
			"Fragment":            fragments,
			"Operation":           operations,
			"OperationResponse":   operationResponses,
			"GenerateClient":      generateCfg.ShouldGenerateClient(),
			"StructSources":       structSources,
			"ClientInterfaceName": generateCfg.GetClientInterfaceName(),
		},
		Packages:   cfg.Packages,
		PackageDoc: "// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.\n",
		Funcs: map[string]interface{}{
			"getters":   getters,
			"isPointer": isPointer,
		},
	}); err != nil {
		return fmt.Errorf("%s generating failed: %w", client.Filename, err)
	}

	return nil
}

type Field struct {
	Name      string
	Type      string
	IsPointer bool
	IsSlice   bool
}

func (f Field) ReturnType() string {
	t := ""
	if f.IsSlice {
		t += "[]"
	}

	if f.IsPointer {
		t += "*"
	}

	t += f.Type

	return t
}

func isPointer(t types.Type) bool {
	_, ok := t.(*types.Pointer)

	return ok
}

func getType(t types.Type) (string, bool, bool) {
	switch it := t.(type) {
	case *types.Basic:
		return it.String(), false, false
	case *types.Pointer:
		typ, _, _ := getType(it.Elem())

		return typ, true, false
	case *types.Slice:
		typ, IsPointer, _ := getType(it.Elem())

		return typ, IsPointer, true
	case *types.Named:
		s := strings.Split(it.String(), ".")

		return s[len(s)-1], false, false
	default:
		return fmt.Sprintf("%T", it), false, false
	}
}

func getters(p types.Type) []Field {
	var fields []Field
	if it, ok := p.(*types.Struct); ok {
		fields = make([]Field, it.NumFields())
		for i := 0; i < it.NumFields(); i++ {
			typ, isPointer, isSlice := getType(it.Field(i).Type())
			fields[i] = Field{
				Name:      it.Field(i).Name(),
				Type:      typ,
				IsPointer: isPointer,
				IsSlice:   isSlice,
			}
		}
	}

	return fields
}
